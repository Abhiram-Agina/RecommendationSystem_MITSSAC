# -*- coding: utf-8 -*-
"""ColdRecommendation_FANALYTICAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tK0e8Xub51dBYDoneFfNSZnLH3vt1Qh2

##### Objective:

Fanalytical aims to expand our product offering to incorporate advanced insights for patron food
& beverage activities. The goal is to develop a menu item (product) recommendation system, to
support the clientâ€™s campaign efforts around concessions and patron engagement.

##### Importing Libraries
"""

#Libraries
import warnings
warnings.filterwarnings('ignore')

import sys
import pandas as pd
import numpy as np

"""##### Loading Dataset"""

lineItemsVN = pd.read_excel('/content/F&M Line Items.xlsx')
lineItemsVN.head(3)

"""##### Data Cleaning"""

#Dropping Empty Features
lineItemsVN = lineItemsVN.drop(["inline_upsell_item_name", "inline_upsell_item_sku", "inline_upsell_menu_item_uuid", 
                                "promotion_uuid", "promotion_details", "tax_rules", 'settled_by', 'refunded_by',
                                'variant_name', 'variant_group'], axis = 1)

#Dropping Uniformly Populated Features
lineItemsVN = lineItemsVN.drop(["inline_upsell", "product_type", "web_order", "promotion_discount", "tax_inclusive", "split_item_quantity", "menu_subtype", "denominator", "numerator"], axis = 1)

#Dropping Redundant Features
lineItemsVN = lineItemsVN.drop(['Unnamed: 0', 'menu', 'internal_name', 'order_id', 'item_report_rollup'], axis = 1)

#Filling Null Values
lineItemsVN['menu_categories'] = lineItemsVN['menu_categories'].fillna(lineItemsVN['item_categories'])
lineItemsVN = lineItemsVN.drop('item_categories', axis = 1)

#Removing '- P' from Item Names, so Items with or without '- P' are considered the same
lineItemsVN['item_name'] = lineItemsVN['item_name'].str.replace("- P", "")
lineItemsVN['item_name'].value_counts().head()

#Clearing all Non-Orders (ex: No Salsa, Spicy, Regular, etc.)
lineItemsVN['menu_categories'].value_counts()
lineItemsVN['menu_categories'].isna().sum()
lineItemsVN = lineItemsVN[lineItemsVN['menu_categories'].isin(['Beer - Packaged', 'Subcontractor', 'N/A Beverage', 'Food', 'Beer - Draft', 'Liquor', 'Mixers,Soda Flavor', 'Mixers', 'Wine', 'Retail'])]

"""##### Prepping Data for Recommendation Model"""

#Reorganizing Data
orderBasedData = lineItemsVN[['order_uuid', 'item_name', 'line_item_uuid']]

orderBasedData['order_id'] = orderBasedData['order_uuid'].astype('category').cat.codes
orderBasedData['item_id'] = orderBasedData['item_name'].astype('category').cat.codes

orderBasedData = orderBasedData.drop('order_uuid', axis = 1)
orderBasedData = orderBasedData.reindex(columns = ['order_id', 'item_id', 'item_name', 'line_item_uuid'])

#Reference List
ReferenceIDs = orderBasedData[["item_id", "item_name"]].drop_duplicates(keep = 'first').sort_values(by = 'item_id').reset_index(drop=True)
#ReferenceIDs

"""##### Sorting Dataset by Orders"""

#Isolating Orders
userCart = 60
filteredDF = pd.DataFrame() #Creating a seperate dataframe that will house special orders

groupedOrders = orderBasedData.groupby('order_id')
keys = groupedOrders.groups.keys()

for i in keys: #Iterating through dataset to filter out needed orders
  order = groupedOrders.get_group(i)
  orderList = order['item_id'].to_list()
  if(userCart in orderList):
    filteredDF = filteredDF.append(order, ignore_index=True)

"""##### Recommendation Model"""

#Counting Other Values

itemCount = filteredDF.groupby('item_id')['line_item_uuid'].count().to_frame().reset_index() #Frequency of other items in order
itemCount['AveragePerOrder'] = itemCount['line_item_uuid']/filteredDF['order_id'].nunique()

reccoSet = pd.DataFrame()
for id in itemCount.item_id:
  reccoSet = reccoSet.append(ReferenceIDs[ReferenceIDs.item_id == id], ignore_index = True)

reccoSet['Propensity %'] = itemCount.AveragePerOrder.to_list()
reccoSet = reccoSet.sort_values(by = ['Propensity %'], ascending = False).reset_index()
reccoSet = reccoSet.drop("index", axis = 1)

print("Customers who shopped for", reccoSet.loc[0]['item_name'], "also shopped for:\n")
print(reccoSet.loc[1:6])

print("\nThere were a total of", filteredDF['order_id'].nunique(), "orders of", reccoSet.loc[0]['item_name'])